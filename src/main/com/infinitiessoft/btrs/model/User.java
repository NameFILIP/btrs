package com.infinitiessoft.btrs.model;

// Generated Jul 9, 2012 10:51:06 AM by Hibernate Tools 3.2.4.GA

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.hibernate.validator.Email;
import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;
import org.jboss.seam.annotations.security.management.UserEnabled;
import org.jboss.seam.annotations.security.management.UserFirstName;
import org.jboss.seam.annotations.security.management.UserLastName;
import org.jboss.seam.annotations.security.management.UserPassword;
import org.jboss.seam.annotations.security.management.UserPrincipal;
import org.jboss.seam.annotations.security.management.UserRoles;

import com.infinitiessoft.btrs.enums.GenderEnum;

/**
 * Users generated by hbm2java
 */
@Entity
@Table(name = "users", uniqueConstraints = @UniqueConstraint(columnNames = "username"))
public class User implements java.io.Serializable {

	private static final long serialVersionUID = -8023930147308505208L;

	private Long id;
	private Department department;
	private String username;
	private String password;
	private String jobTitle;
	private String email;
	private GenderEnum gender;
	private Date lastLogin;
	private String firstName;
	private String lastName;
	private Date createdDate;
	private boolean enabled;
	private List<Role> roles = new ArrayList<Role>(0);
	private Set<StatusChange> statusChanges = new HashSet<StatusChange>(0);
	private Set<Report> outgoingReports = new HashSet<Report>(0);
	private Set<Report> incomingReports = new HashSet<Report>(0);

	public User() {
	}

	public User(Long id, String username, String password, String email, GenderEnum gender, Date createdDate) {
		this.id = id;
		this.username = username;
		this.password = password;
		this.email = email;
		this.gender = gender;
		this.createdDate = createdDate;
	}

	public User(Long id, Department department, String username, String password, String jobTitle, String email, GenderEnum gender,
			Date lastLogin, String firstName, String lastName, Date createdDate, List<Role> roles, Set<StatusChange> statusChanges,
			Set<Report> outgoingReports, Set<Report> incomingReports) {
		this.id = id;
		this.roles = roles;
		this.department = department;
		this.username = username;
		this.password = password;
		this.jobTitle = jobTitle;
		this.email = email;
		this.gender = gender;
		this.lastLogin = lastLogin;
		this.firstName = firstName;
		this.lastName = lastName;
		this.createdDate = createdDate;
		this.statusChanges = statusChanges;
		this.outgoingReports = outgoingReports;
		this.incomingReports = incomingReports;
	}

	@Id
	@GeneratedValue
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@UserRoles
	@ManyToMany(targetEntity = Role.class, fetch = FetchType.LAZY)
	@JoinTable(name = "users_roles",
		joinColumns = @JoinColumn(name = "user_id"),
		inverseJoinColumns = @JoinColumn(name = "role_id"))
	public List<Role> getRoles() {
		return roles;
	}

	public void setRoles(List<Role> roles) {
		this.roles = roles;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "department_id")
	public Department getDepartment() {
		return this.department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}

	@UserPrincipal
	@Column(name = "username", unique = true, nullable = false, length = 20)
	@NotNull
	@Length(max = 20)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@UserPassword(hash = "sha")
	@Column(name = "password", nullable = false, length = 100)
	@NotNull
	@Length(max = 100)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "job_title", length = 100)
	@Length(max = 100)
	public String getJobTitle() {
		return jobTitle;
	}

	public void setJobTitle(String jobTitle) {
		this.jobTitle = jobTitle;
	}

	@Column(name = "email", nullable = false, length = 100)
	@NotNull
	@Email
	@Length(max = 100)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Enumerated(EnumType.STRING)
	@Column(name = "gender", nullable = false, length = 20)
	public GenderEnum getGender() {
		return this.gender;
	}

	public void setGender(GenderEnum gender) {
		this.gender = gender;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_login", length = 29)
	public Date getLastLogin() {
		return this.lastLogin;
	}

	public void setLastLogin(Date lastLogin) {
		this.lastLogin = lastLogin;
	}

	@UserFirstName
	@Column(name = "first_name", length = 100)
	@Length(max = 100)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@UserLastName
	@Column(name = "last_name", length = 100)
	@Length(max = 100)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_date", length = 29)
	public Date getCreatedDate() {
		return this.createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	@UserEnabled
	public boolean isEnabled() {
		return enabled;
	}

	public void setEnabled(boolean enabled) {
		this.enabled = enabled;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<StatusChange> getStatusChanges() {
		return this.statusChanges;
	}

	public void setStatusChanges(Set<StatusChange> statusChanges) {
		this.statusChanges = statusChanges;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "owner")
	public Set<Report> getOutgoingReports() {
		return this.outgoingReports;
	}

	public void setOutgoingReports(Set<Report> outgoingReports) {
		this.outgoingReports = outgoingReports;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "reviewer")
	public Set<Report> getIncomingReports() {
		return this.incomingReports;
	}

	public void setIncomingReports(Set<Report> incomingReports) {
		this.incomingReports = incomingReports;
	}
	
	@Transient
	public String getFullName() {
		return firstName + " " + lastName;
	}

}
