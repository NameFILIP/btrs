package com.infinitiessoft.btrs.model;
// Generated Jul 9, 2012 10:51:06 AM by Hibernate Tools 3.2.4.GA

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import com.infinitiessoft.btrs.enums.ParameterEnum;

/**
 * Expenses generated by hbm2java
 */
@Entity
@Table(name = "expenses")
public class Expense implements java.io.Serializable {

	private static final long serialVersionUID = 1475240060044682784L;
	
	private Long id;
	private ExpenseType expenseType;
	private Report report;
	private String comment;
	
	private List<ParameterValue> parameterValues;
	
	

	public Expense() {}

	@Id
	@GeneratedValue
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "type_id")
	public ExpenseType getExpenseType() {
		return this.expenseType;
	}

	public void setExpenseType(ExpenseType expenseType) {
		this.expenseType = expenseType;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "report_id")
	public Report getReport() {
		return this.report;
	}

	public void setReport(Report report) {
		this.report = report;
	}

	@Column(length = 4000)
	public String getComment() {
		return comment;
	}

	public void setComment(String comment) {
		this.comment = comment;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "expense", cascade = CascadeType.ALL)
	public List<ParameterValue> getParameterValues() {
		if (parameterValues == null) {
			parameterValues = new ArrayList<ParameterValue>(0);
		}
		return parameterValues;
	}

	public void setParameterValues(List<ParameterValue> parameterValues) {
		this.parameterValues = parameterValues;
	}
	
	
	@Transient
	public ParameterValue getParameterValue(ParameterEnum parameter) {
		for (ParameterValue param : parameterValues) {
			if (parameter.equals(param.getTypeParameter().getValue())) {
				return param;
			}
		}
		return null;
	}
	
	@Transient
	public ParameterValue getParameterValue(String parameter) {
		return getParameterValue(ParameterEnum.valueOf(parameter.toUpperCase()));
	}
	
	@Transient
	public Integer getTotalAmount() {
		ParameterValue amountParam = getParameterValue(ParameterEnum.AMOUNT);
		return amountParam == null ? 0 : Integer.valueOf(amountParam.getValue());
	}
	
	@Transient
	public Integer getTax() {
		ParameterValue taxParam = getParameterValue(ParameterEnum.TAX);
		return taxParam == null ? 0 : Integer.valueOf(taxParam.getValue());
	}
	
	@Transient
	public Integer getAmountWithoutTax() {
		return getTotalAmount() - getTax();
	}
	
}
